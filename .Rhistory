simulate_data <- function(number_of_participants=3, covariance_matrix=diag(2), outcome_column=1, means=c(0,0)){
library(MASS)
sim_data <- mvrnorm(n=number_of_participants,mu=means,Sigma=covariance_matrix)
data=list()
data["y"] <- list(sim_data[,outcome_column])
data["x"] <- list(sim_data[,outcome_column*-1])
return(data)
}
example_dataset <- simulate_data()
pdf("survival.pdf", width = 10, height = 8)
par(cex.axis = 2.0, cex.lab = 2.0, cex.main = 2.0, mar = c(6.0,6,1,1), mgp = c(4, 1, 0))
colnames(example_dataset) <- obj$xvar.names
example_dataset1 <- example_dataset2 <- example_dataset
RF_train <- function(data=training_dataset,formula=y~x,mtry=NULL,nodesize=NULL,model_type="rfsrc"){
library(randomForestSRC)
if (model_type=="rfsrc"){
random_forest = rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="rfsrc.fast"){
random_forest = rfsrc.fast(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="sidClustering.rfsrc"){
random_forest = sidClustering.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="imbalanced.rfsrc"){
random_forest = imbalanced.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="quantreg.rfsrc"){
random_forest = quantreg.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
}
return(random_forest)
}
random_forest_example <- RF_train(data=example_dataset)
random_forest_example <- RF_train(data=example_dataset)
example_dataset1 <- data.frame(example_dataset)
random_forest_example <- RF_train(data=example_dataset)
random_forest_example <- RF_train(data=example_dataset1)
y.pred <- predict(random_forest_example,example_dataset1 = rbind(example_dataset1,random_forest_example$xvar)[1:2,])
obj <- random_forest_example
print(obj)
newdata <- data.frame(lapply(1:ncol(obj$xvar),function(i){median(obj$xvar[,i])}))
colnames(newdata) <- obj$xvar.names
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1:2,])
y.pred <- predict(obj,newdata)
View(y.pred)
pdf("survival.pdf", width = 10, height = 8)
par(cex.axis = 2.0, cex.lab = 2.0, cex.main = 2.0, mar = c(6.0,6,1,1), mgp = c(4, 1, 0))
plot(round(y.pred$time.interest,2),y.pred$survival[1,], type="l", xlab="X",
ylab="Y", col=1, lty=1, lwd=2)
View(y.pred)
plot(y.pred$survival[1,], type="l", xlab="X",
ylab="Y", col=1, lty=1, lwd=2)
plot.variable(obj, xvar.names = "X", partial = TRUE)
plot.variable(obj, xvar.names = "X", partial = TRUE)
plot.variable(obj, partial = TRUE)
plot.variable(obj, partial = TRUE, notch = FALSE)
View(obj)
simulate_data <- function(number_of_participants=3, covariance_matrix=diag(2), outcome_column=1, means=c(0,0)){
library(MASS)
sim_data <- mvrnorm(n=number_of_participants,mu=means,Sigma=covariance_matrix)
data=list()
data["y"] <- list(sim_data[,outcome_column])
data["x"] <- list(sim_data[,outcome_column*-1])
return(data)
}
example_dataset <- simulate_data()
example_dataset1 <- data.frame(example_dataset)
RF_train <- function(data=training_dataset,formula=y~x,mtry=NULL,nodesize=NULL,model_type="rfsrc"){
library(randomForestSRC)
if (model_type=="rfsrc"){
random_forest = rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="rfsrc.fast"){
random_forest = rfsrc.fast(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="sidClustering.rfsrc"){
random_forest = sidClustering.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="imbalanced.rfsrc"){
random_forest = imbalanced.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="quantreg.rfsrc"){
random_forest = quantreg.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
}
return(random_forest)
}
random_forest_example <- RF_train(data=example_dataset1)
obj <- random_forest_example
print(obj)
plot.variable(obj, partial = TRUE, notch = FALSE)
dev.off()
plot(rnorm(50), rnorm(50))
plot(rnorm(50), rnorm(50))
dev.off()
print(plot(1)) # Basically use print command once
simulate_data <- function(number_of_participants=3, covariance_matrix=diag(2), outcome_column=1, means=c(0,0)){
library(MASS)
sim_data <- mvrnorm(n=number_of_participants,mu=means,Sigma=covariance_matrix)
data=list()
data["y"] <- list(sim_data[,outcome_column])
data["x"] <- list(sim_data[,outcome_column*-1])
return(data)
}
example_dataset <- simulate_data()
example_dataset1 <- data.frame(example_dataset)
RF_train <- function(data=training_dataset,formula=y~x,mtry=NULL,nodesize=NULL,model_type="rfsrc"){
library(randomForestSRC)
if (model_type=="rfsrc"){
random_forest = rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="rfsrc.fast"){
random_forest = rfsrc.fast(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="sidClustering.rfsrc"){
random_forest = sidClustering.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="imbalanced.rfsrc"){
random_forest = imbalanced.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="quantreg.rfsrc"){
random_forest = quantreg.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
}
return(random_forest)
}
random_forest_example <- RF_train(data=example_dataset1)
obj <- random_forest_example
print(obj)
plot.variable(obj, partial = TRUE, notch = FALSE)
get.cindex(obj$yvar[,1], obj$yvar[,2], obj$predicted.oob)
get.cindex(obj$yvar[,0], obj$yvar[,2], obj$predicted.oob)
get.cindex(obj$yvar[,] obj$predicted.oob)
get.cindex(obj$yvar[,], obj$predicted.oob)
get.cindex(obj$yvar[1], obj$predicted.oob)
get.cindex(obj$yvar[1], obj$yvar[2], obj$predicted.oob)
get.cindex(obj$yvar[1], obj$yvar[1], obj$predicted.oob)
get.cindex(obj$yvar[1], obj$yvar[1], obj$predicted.oob[1])
get.cindex(obj$yvar[1], obj$yvar[2], obj$predicted.oob[1])
get.cindex(obj$yvar[1], obj$yvar[3], obj$predicted.oob[1])
get.cindex(obj$yvar[1], obj$yvar[3], obj$predicted.oob[2])
get.cindex(obj$yvar[1], obj$yvar[2], obj$predicted.oob[3])
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1:2,])
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1:3])
newdata <- data.frame(lapply(1:ncol(obj$xvar),function(i){median(obj$xvar[,i])}))
colnames(newdata) <- obj$xvar.names
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1:3])
newdata <- data.frame(lapply(1:ncol(obj$xvar),function(i){median(obj$xvar[,i])}))
colnames(newdata) <- obj$xvar.names
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1:3,])
newdata <- data.frame(lapply(1:ncol(obj$xvar),function(i){median(obj$xvar[,i])}))
colnames(newdata) <- obj$xvar.names
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1])
newdata <- data.frame(lapply(1:ncol(obj$xvar),function(i){median(obj$xvar[,i])}))
colnames(newdata) <- obj$xvar.names
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1])
pdf("survival.pdf", width = 10, height = 8)
par(cex.axis = 2.0, cex.lab = 2.0, cex.main = 2.0, mar = c(6.0,6,1,1), mgp = c(4, 1, 0))
plot(round(y.pred$time.interest,2),y.pred$survival[1,], type="l", xlab="X",
ylab="Y", col=1, lty=1, lwd=2)
plot(y.pred$survival[1,], type="l", xlab="X", ylab="Y", col=1, lty=1, lwd=2)
plot(y.pred$survival[1,], type="l", xlab="X", ylab="Y", col=1, lty=1, lwd=2, xlim=NULL)
plot(y.pred$survival[1,], type="l", xlab="X", ylab="Y", col=1, lty=1, lwd=2, xlim=1)
plot(y.pred$survival[1,], type="l", xlab="X", ylab="Y", col=1, lty=1, lwd=2, xlim=c(-1,1))
plot(y.pred$survival[1,], type="l", xlab="X", ylab="Y", col=1, lty=1, lwd=2, xlim=c(-1,1), ylim=c(-1,1))
lines(round(y.pred$time.interest,2), y.pred$survival[2,], col=2, lty=2, lwd=2)
lines(y.pred$survival[2,], col=2, lty=2, lwd=2)
legend("topright", legend=c("X","Y"), col=c(1:2), lty=1:2, cex=2, lwd=2)
dev.off()
simulate_data <- function(number_of_participants=3, covariance_matrix=diag(2), outcome_column=1, means=c(0,0)){
library(MASS)
sim_data <- mvrnorm(n=number_of_participants,mu=means,Sigma=covariance_matrix)
data=list()
data["y"] <- list(sim_data[,outcome_column])
data["x"] <- list(sim_data[,outcome_column*-1])
return(data)
}
example_dataset <- simulate_data()
example_dataset1 <- data.frame(example_dataset)
RF_train <- function(data=training_dataset,formula=y~x,mtry=NULL,nodesize=NULL,model_type="rfsrc"){
library(randomForestSRC)
if (model_type=="rfsrc"){
random_forest = rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="rfsrc.fast"){
random_forest = rfsrc.fast(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="sidClustering.rfsrc"){
random_forest = sidClustering.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="imbalanced.rfsrc"){
random_forest = imbalanced.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="quantreg.rfsrc"){
random_forest = quantreg.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
}
return(random_forest)
}
random_forest_example <- RF_train(data=example_dataset1)
obj <- random_forest_example
print(obj)
plot.variable(obj, partial = TRUE, notch = FALSE)
newdata <- data.frame(lapply(1:ncol(obj$xvar),function(i){median(obj$xvar[,i])}))
colnames(newdata) <- obj$xvar.names
y.pred <- predict(obj,newdata = rbind(newdata,obj$xvar)[1])
pdf("survival.pdf", width = 10, height = 8)
par(cex.axis = 2.0, cex.lab = 2.0, cex.main = 2.0, mar = c(6.0,6,1,1), mgp = c(4, 1, 0))
plot(y.pred$survival[1,], type="l", xlab="X", ylab="Y", col=1, lty=1, lwd=2, xlim=c(-1,1), ylim=c(-1,1))
lines(y.pred$survival[2,], col=2, lty=2, lwd=2)
legend("topright", legend=c("X","Y"), col=c(1:2), lty=1:2, cex=2, lwd=2)
dev.off()
simulate_data <- function(number_of_participants=3, covariance_matrix=diag(2), outcome_column=1, means=c(0,0)){
library(MASS)
sim_data <- mvrnorm(n=number_of_participants,mu=means,Sigma=covariance_matrix)
data=list()
data["y"] <- list(sim_data[,outcome_column])
data["x"] <- list(sim_data[,outcome_column*-1])
return(data)
}
example_dataset <- simulate_data()
example_dataset1 <- data.frame(example_dataset)
RF_train <- function(data=training_dataset,formula=y~x,mtry=NULL,nodesize=NULL,model_type="rfsrc"){
library(randomForestSRC)
if (model_type=="rfsrc"){
random_forest = rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="rfsrc.fast"){
random_forest = rfsrc.fast(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="sidClustering.rfsrc"){
random_forest = sidClustering.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="imbalanced.rfsrc"){
random_forest = imbalanced.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
} else if (model_type=="quantreg.rfsrc"){
random_forest = quantreg.rfsrc(formula=formula,data=data,mtry=mtry,nodesize=nodesize)
}
return(random_forest)
}
random_forest_example <- RF_train(data=example_dataset1)
obj <- random_forest_example
print(obj)
is.language
is.language
nrow(y)
nrow('y')
nrow(example_dataset1)
nvar(example_dataset1)
nvars(example_dataset1)
ncol(example_dataset1)
getwd()
setwd("C:/Users/lundq163/Desktop/RFRF")
