#.trainbox: #fill=#FFFF00 visual=ellipse
#.testbox: #fill=#00FFFF visual=ellipse
#.RFbox: #fill=#FFFFFF
#.proxmat: #fill=#FF007F visual=ellipse
#.subtype: #fill=#00FF00 visual=ellipse
[ <frame>RFRF flow diagram|
[<fullbox>Full Data] --:> [Holdout]
[Holdout] --:> [<trainbox>Train Data]
[Holdout] --:> [<testbox>Test Data]
[<trainbox>Train Data] --:> [cross-validation]
[cross-validation] cv folds --:> [<trainbox>Train Folds]
[cross-validation] --:> [<testbox>Valid Fold]
[Train Folds] tuning --:> [RF train]
[RF train] selection --:> [RF test]
[<testbox>Valid Fold] testing --:> [RF test]
[RF test] --:> [RF model]
[<trainbox>Train Data] train --:> [RF model]
[<testbox>Test Data] test --:> [RF model]
[RF model] --:> [<proxmat>proximity matrix]
[<proxmat>proximity matrix] --:> [subtype identification]
[subtype identification] --:> [<subtype>subtypes]
]"
nomnoml::nomnoml(flow_diagram)
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string]
]"
nomnoml::nomnoml(subtype_ID_diagram)
RF_test_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.databox: #fill=#FFFF00
#.forestbox: #fill=#FF1111
#.testbox: #fill=#00FFFF
#.optimalbox: #fill=#FF7777
[<frame> RF Test Diagram|
[<forestbox> Random Forest | call: string
mtry: int
nodesize: int
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
forest: forest ]
[<testbox>Test Fold|  data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<forestbox> Random Forest] -:> [Predict RFSRC | hyperparameter: string
file.name: string
| predict.rfsrc()
write.tsv()]
[<testbox>Test Fold] -:> [Predict RFSRC]
[Predict RFSRC] -:> [<optimalbox>Optimal RF Parameters | call: string
mtry: int
nodesize: int
performance: float]
]"
nomnoml::nomnoml(RF_test_diagram)
RF_model_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.databox: #fill=#FFFF00
#.proxbox: #fill=#FF007F
#.testbox: #fill=#00FFFF
#.optimalbox: #fill=#FF7777
#.forestbox: #fill=#FF1111
#.trainbox: #fill=#FFFF00
[<frame> RF Model Diagram|
[<optimalbox>Optimal RF Parameters | call: string
mtry: int
nodesize: int
err.rate: float]
[<trainbox>Train Data|  data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<optimalbox>Optimal RF Parameters] -:> [RF Optimal Train | data: data.frame
formula: string
file.path: string
file.name: string | read.tsv()
rfsrc()
rfsrc.fast()
sidClustering.rfsrc()
imbalanced.rfsrc()
quantreg.rfsrc()]
[<trainbox>Train Data] -:> [RF Optimal Train]
[RF Optimal Train] -:> [<forestbox> Optimal Random Forest | call: string
mtry: int
nodesize: int
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
forest: forest ]
[<forestbox> Optimal Random Forest] -:> [RF Optimal Test | hyperparameter: string
file.name: string |
predict.rfsrc()
create.matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [RF Optimal Test]
[RF Optimal Test] -:> [RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float]
]"
nomnoml::nomnoml(RF_model_diagram)
RF_test_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.databox: #fill=#FFFF00
#.forestbox: #fill=#FF1111
#.testbox: #fill=#00FFFF
#.optimalbox: #fill=#FF7777
[<frame> RF Test Diagram|
[<forestbox> Random Forest | call: string
mtry: int
nodesize: int
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
forest: forest ]
[<testbox>Test Fold|  data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<forestbox> Random Forest] -:> [Predict RFSRC | hyperparameter: string
file.name: string
| predict.rfsrc()
write.tsv()]
[<testbox>Test Fold] -:> [Predict RFSRC]
[Predict RFSRC] -:> [<optimalbox>Optimal RF Parameters | call: string
mtry: int
nodesize: int
err.rate: float|
get.auc()]
]"
#RF model diagram
#RF model takes in the training data and trains an RF using the
RF_model_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.databox: #fill=#FFFF00
#.proxbox: #fill=#FF007F
#.testbox: #fill=#00FFFF
#.optimalbox: #fill=#FF7777
#.forestbox: #fill=#FF1111
#.trainbox: #fill=#FFFF00
[<frame> RF Model Diagram|
[<optimalbox>Optimal RF Parameters | call: string
mtry: int
nodesize: int
err.rate: float]
[<trainbox>Train Data|  data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<optimalbox>Optimal RF Parameters] -:> [RF Optimal Train | data: data.frame
formula: string
file.path: string
file.name: string | read.tsv()
rfsrc()
rfsrc.fast()
sidClustering.rfsrc()
imbalanced.rfsrc()
quantreg.rfsrc()]
[<trainbox>Train Data] -:> [RF Optimal Train]
[RF Optimal Train] -:> [<forestbox> Optimal Random Forest | call: string
mtry: int
nodesize: int
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
forest: forest ]
[<forestbox> Optimal Random Forest] -:> [RF Optimal Test | hyperparameter: string
file.name: string |
predict.rfsrc()
create.matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [RF Optimal Test]
[RF Optimal Test] -:> [RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float |
get.auc()]
]"
nomnoml::nomnoml(RF_model_diagram)
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()]
]"
nomnoml::nomnoml(subtype_ID_diagram)
#subtype ID diagram for RFRF
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode = undirected
weighted = NULL
diag = FALSE
add.colnames = NULL
add.rownames = NULL |
graph_from_adjacency_matrix()]
]"
nomnoml::nomnoml(subtype_ID_diagram)
#subtype ID diagram for RFRF
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.testbox: #fill=#00FFFF
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode: undirected
weighted: TRUE
diag: FALSE |
graph_from_adjacency_matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [matrix to graph]
]"
nomnoml::nomnoml(subtype_ID_diagram)
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.testbox: #fill=#00FFFF
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode: undirected
weighted: TRUE
diag: FALSE |
graph_from_adjacency_matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [matrix to graph]
[matrix to graph] -:> [proximity graph |
proximity_graph: graph]
]"
nomnoml::nomnoml(subtype_ID_diagram)
RF_model_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.databox: #fill=#FFFF00
#.proxbox: #fill=#FF007F
#.testbox: #fill=#00FFFF
#.optimalbox: #fill=#FF7777
#.forestbox: #fill=#FF1111
#.trainbox: #fill=#FFFF00
[<frame> RF Model Diagram|
[<optimalbox>Optimal RF Parameters | call: string
mtry: int
nodesize: int
err.rate: float]
[<trainbox>Train Data|  data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<optimalbox>Optimal RF Parameters] -:> [RF Optimal Train | data: data.frame
formula: string
file.path: string
file.name: string | read.tsv()
rfsrc()
rfsrc.fast()
sidClustering.rfsrc()
imbalanced.rfsrc()
quantreg.rfsrc()]
[<trainbox>Train Data] -:> [RF Optimal Train]
[RF Optimal Train] -:> [<forestbox> Optimal Random Forest | call: string
mtry: int
nodesize: int
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
forest: forest ]
[<forestbox> Optimal Random Forest] -:> [RF Optimal Test | hyperparameter: string
file.name: string |
predict.rfsrc()
create.matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [RF Optimal Test]
[RF Optimal Test] -:> [RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float |
get.auc()]
]"
#subtype ID diagram for RFRF
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.testbox: #fill=#00FFFF
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode: undirected
weighted: TRUE
diag: FALSE |
graph_from_adjacency_matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [matrix to graph]
[matrix to graph] -:> [proximity graph |
proximity_graph: graph] -:> [community detection function |
cluster_infomap()]
]"
nomnoml::nomnoml(RF_Model_diagram)
nomnoml::nomnoml(RF_model_diagram)
nomnoml::nomnoml(subtype_ID_diagram)
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.testbox: #fill=#00FFFF
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode: undirected
weighted: TRUE
diag: FALSE |
graph_from_adjacency_matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [matrix to graph]
[matrix to graph] -:> [proximity graph |
proximity_graph: graph] -:> [community detection function |
cluster_infomap()]
]"
nomnoml::nomnoml(subtype_ID_diagram)
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.testbox: #fill=#00FFFF
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode: undirected
weighted: TRUE
diag: FALSE |
graph_from_adjacency_matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [matrix to graph]
[matrix to graph] -:> [proximity graph |
proximity_graph: graph] -:> [community detection function |
cluster_infomap()]
]"
nomnoml::nomnoml(subtype_ID_diagram)
subtype_ID_diagram="#stroke: #000000
#direction: down
#padding: 4
#spacing: 20
#fontsize: 10
#gutter: 20
#.testbox: #fill=#00FFFF
[<frame> Subtype ID Diagram|
[RF Prediction | proximity: array
yvar: data.frame
yvar.names: string
xvar: data.frame
xvar.names: string
err.rate: float|
get.auc()] -:> [matrix to graph |
adjmatrix: array
mode: undirected
weighted: TRUE
diag: FALSE |
graph_from_adjacency_matrix()]
[<testbox>Test Data| data: data.frame
ID column: string
Outcome Column: string
nrows: int
ncols: int]
[<testbox>Test Data] -:> [matrix to graph]
[matrix to graph] -:> [proximity graph |
proximity_graph: graph] -:> [community detection function |
cluster_infomap()]
]"
nomnoml::nomnoml(subtype_ID_diagram)
setwd("C:/Users/lundq163/Desktop/RFRF/R")
ls
